# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cluster_revisi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(796, 462)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet("background-color: rgb(179, 179, 179);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(250, 370, 71, 31))
        self.pushButton_6.setStyleSheet(
            "font: 87 8pt \"Century Gothic\";background-color: rgb(185, 239, 255);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(370, 0, 20, 461))
        self.line.setAutoFillBackground(True)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setEnabled(True)
        self.label_8.setGeometry(QtCore.QRect(60, 40, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setAcceptDrops(True)
        self.label_8.setAutoFillBackground(False)
        self.label_8.setStyleSheet("")
        self.label_8.setScaledContents(False)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setEnabled(True)
        self.label_9.setGeometry(QtCore.QRect(230, 40, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAcceptDrops(True)
        self.label_9.setAutoFillBackground(False)
        self.label_9.setStyleSheet("")
        self.label_9.setScaledContents(False)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(650, 360, 71, 31))
        self.pushButton_7.setStyleSheet(
            "font: 87 8pt \"Century Gothic\";background-color: rgb(185, 239, 255);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(410, 110, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(410, 80, 46, 13))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(410, 150, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(410, 180, 113, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(410, 250, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(410, 220, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAutoFillBackground(False)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(610, 80, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAutoFillBackground(False)
        self.label_4.setObjectName("label_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(610, 110, 113, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(610, 150, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAutoFillBackground(False)
        self.label_5.setObjectName("label_5")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(610, 180, 113, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(610, 250, 113, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(610, 220, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setAutoFillBackground(False)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(410, 10, 311, 51))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setAutoFillBackground(True)
        self.label_7.setWordWrap(True)
        self.label_7.setObjectName("label_7")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(410, 290, 311, 51))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setAutoFillBackground(True)
        self.label_10.setWordWrap(True)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(50, 370, 161, 31))
        self.label_11.setFont(font)
        self.label_11.setAutoFillBackground(True)
        self.label_11.setWordWrap(True)
        self.label_11.setObjectName("label_11")

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(40, 70, 121, 291))
        self.listWidget.setObjectName("listWidget")
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(220, 70, 121, 291))
        self.listWidget_2.setObjectName("listWidget_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 796, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cluster Stock"))
        self.pushButton_6.setText(_translate("MainWindow", "Cluster"))
        self.label_8.setText(_translate("MainWindow", "Cluster 1"))
        self.label_9.setText(_translate("MainWindow", "Cluster 2"))
        self.pushButton_7.setText(_translate("MainWindow", "Rank"))
        self.label.setText(_translate("MainWindow", "EMA 50"))
        self.label_2.setText(_translate("MainWindow", "EMA 9 Cross Up 26"))
        self.label_3.setText(_translate("MainWindow", "EMA 200"))
        self.label_4.setText(_translate("MainWindow", "Market Cap"))
        self.label_5.setText(_translate("MainWindow", "Cash"))
        self.label_6.setText(_translate("MainWindow", "PER"))
        self.label_7.setText(_translate(
            "MainWindow", "Masukan bobot untuk melakukan perhitungan ( isi bobot 0 jika tidak ingin menggunakan)"))
        self.label_10.setText(_translate(
            "MainWindow", "Total bobot bernilai 100"))
        self.pushButton_6.clicked.connect(self.cluster)
        self.pushButton_7.clicked.connect(self.validation)

    def validation(self):
        ema50 = self.lineEdit.text()
        ema9x26 = self.lineEdit_2.text()
        ema200 = self.lineEdit_3.text()
        marketcap = self.lineEdit_4.text()
        cash = self.lineEdit_5.text()
        PER = self.lineEdit_6.text()

        # float(marketcap) + float(cash) + float(PER)
        if(ema50 == '' or ema9x26 == '' or ema200 == '' or marketcap == '' or cash == '' or PER == ''):
            msg = QMessageBox()
            msg.setText('Nilai bobot masih kosong!')
            msg.exec_()
        elif (ema50.isnumeric() == False or ema9x26.isnumeric() == False or ema200.isnumeric() == False or cash.isnumeric() == False or marketcap.isnumeric() == False or PER.isnumeric() == False):
            msg = QMessageBox()
            msg.setText('Nilai bobot harus berupa angka!')
            msg.exec_()
        else:
            totalbobot = float(ema50) + float(ema9x26) + float(ema200) + \
                float(marketcap) + float(PER) + float(cash)
            if(totalbobot != 100):
                msg = QMessageBox()
                msg.setText(
                    'Nilai bobot harus sama dengan 100! \n(Total bobot = {}'.format(str(totalbobot)))
                msg.exec_()

            else:
                self.rank()

    def cluster(self):
        df = pd.read_excel('DataSaham5.xlsx',
                           sheet_name='Sheet1')
        cluster_1 = df.loc[df['cluster'] == 'Cluster 1']
        cluster_2 = df.loc[df['cluster'] == 'Cluster 0']
        n = self.listWidget.count()
        _translate = QtCore.QCoreApplication.translate
        if(n == 0):
            self.listWidget.addItems(cluster_1['kode_saham'].array)
            self.listWidget_2.addItems(cluster_2['kode_saham'].array)

        if(self.listWidget.count() > self.listWidget_2.count()):
            self.listWidget_2.setStyleSheet(
                "background-color: rgb(136, 255, 85)")
            self.label_11.setText(_translate(
                "MainWindow", "Cluster 1 merupakan saham Bluechips"))
        else:
            self.listWidget.setStyleSheet(
                "background-color: rgb(136, 255, 85)")

            self.label_11.setText(_translate(
                "MainWindow", "Cluster 1 merupakan saham Bluechips"))

    def getEMA(self, kode_saham, period):
        df = pd.read_csv('historyprice/{}.csv'.format(kode_saham), error_bad_lines=False)
        df['EMA'] = df['Close'].ewm(span=period, adjust=False).mean()

        return df.iloc[-1]['EMA']

    def test(self):
        a = 't'
        return str(a)

    def rank(self):
        df = pd.read_excel('DataSaham5.xlsx',
                           sheet_name='Sheet1', engine='openpyxl')
        cluster_1 = df.loc[df['cluster'] == 'Cluster 1']["kode_saham"].array
        cluster_2 = df.loc[df['cluster'] == 'Cluster 0']["kode_saham"].array
        Stot = []
        for x in cluster_1:
            # Nilai Kriteria
            EMA9 = self.getEMA(x, 9)
            EMA26 = self.getEMA(x, 26)
            EMA50 = self.getEMA(x, 50)
            EMA200 = self.getEMA(x, 200)
            market_cap = df.loc[df['kode_saham'] == x]['Market_Cap'].values[0]
            harga = df.loc[df['kode_saham'] == x]['harga_sekarang'].values[0]
            cash = df.loc[df['kode_saham'] == x]['Cash_x'].values[0]
            PER = df.loc[df['kode_saham'] == x]['PE'].values[0]
            isNegative = df.loc[df['kode_saham'] == x]['Negative PE'].values[0]
            # print(x)
            if(harga > EMA50):
                X1 = float(1000)
            if(harga < EMA50):
                X1 = float(500)

            if(EMA9 > EMA26):
                X2 = float(1000)
            if(EMA9 < EMA26):
                X2 = float(500)
            if(harga > EMA200):
                X3 = float(1000)
            if(harga < EMA200):
                X3 = float(500)
            X4 = float(market_cap)
            X5 = float(cash)

            if str(isNegative) == 'N':
                X6 = float(PER)
            if str(isNegative) == 'Y':
                X6 = 5000

            # Bobot Kriteria
            W1 = float(self.lineEdit.text())/100
            W2 = float(self.lineEdit_2.text())/100
            W3 = float(self.lineEdit_3.text())/100
            W4 = float(self.lineEdit_4.text())/100
            W5 = float(self.lineEdit_5.text())/100
            W6 = float(self.lineEdit_6.text())/100

            S = (X1 ** W1) * (X2 ** W2) * (X3 ** W3) * \
                (X4 ** W4) * (X5 ** W5) * (X6 ** (-W6))
            Stot.append([x, S])
       # print(Stot)
        stotal = 0
        for x in Stot:
            stotal = x[1] + stotal
        for x in Stot:
            v = x[1] / stotal
            x.append(v)
       # print(Stot)
        df['v'] = 0

        for x in Stot:
            df.loc[df['kode_saham'] == x[0], 'v'] = x[2]

        df1 = df[df['cluster'] == 'Cluster 1'].sort_values(
            by=['v'], ascending=False)
        rankResult1 = df1.loc[:, 'kode_saham'].values
        self.listWidget.clear()
        self.listWidget.addItems(rankResult1)

        Stot2 = []
        for x in cluster_2:
            # Nilai Kriteria
            EMA9 = self.getEMA(x, 9)
            EMA26 = self.getEMA(x, 26)
            EMA50 = self.getEMA(x, 50)
            EMA200 = self.getEMA(x, 200)
            market_cap = df.loc[df['kode_saham'] == x]['Market_Cap'].values[0]
            harga = df.loc[df['kode_saham'] == x]['harga_sekarang'].values[0]
            cash = df.loc[df['kode_saham'] == x]['Cash_x'].values[0]
            PER = df.loc[df['kode_saham'] == x]['PE'].values[0]
            isNegative = df.loc[df['kode_saham'] == x]['Negative PE'].values[0]

            if(harga > EMA50):
                X1 = float(1000)
            if(harga < EMA50):
                X1 = float(500)
            if(EMA9 > EMA26):
                X2 = float(1000)
            if(EMA9 > EMA26):
                X2 = float(500)
            if(harga > EMA200):
                X3 = float(1000)
            if(harga < EMA200):
                X3 = float(500)
            X4 = float(market_cap)
            X5 = float(cash)

            if str(isNegative) == 'N':
                X6 = float(PER)
            if str(isNegative) == 'Y':
                X6 = 5000

            # Bobot Kriteria
            W1 = float(self.lineEdit.text())/100
            W2 = float(self.lineEdit_2.text())/100
            W3 = float(self.lineEdit_3.text())/100
            W4 = float(self.lineEdit_4.text())/100
            W5 = float(self.lineEdit_5.text())/100
            W6 = float(self.lineEdit_6.text())/100

            S = (X1 ** W1) * (X2 ** W2) * (X3 ** W3) * \
                (X4 ** W4) * (X5 ** W5) * (X6 ** (-W6))
            Stot2.append([x, S])

        stotal2 = 0
        for x in Stot2:
            stotal2 = x[1] + stotal
        for x in Stot2:
            v = x[1] / stotal2
            x.append(v)

        df['v'] = 0

        for x in Stot2:
            df.loc[df['kode_saham'] == x[0], 'v'] = x[2]

        df2 = df[df['cluster'] == 'Cluster 0'].sort_values(
            by=['v'], ascending=False)
        rankResult2 = df2.loc[:, 'kode_saham'].values
        self.listWidget_2.clear()
        self.listWidget_2.addItems(rankResult2)
        msg = QMessageBox()
        msg.setText(
            'Berhasil melakukan perankingan! silahkan cek kolom cluster')
        msg.exec_()

        import hasil
        self.windowHasil = QtWidgets.QMainWindow()
        self.uiHasil = hasil.Ui_MainWindow()
        self.uiHasil.setupUi(self.windowHasil)
        if(self.listWidget.count() > self.listWidget_2.count()):
            n_cluster = 2
        else:
            n_cluster = 1
        x_rankResult1 = str(rankResult1[:5]).replace(
            '[', '').replace(']', '')
        x_rankResult2 = str(rankResult2[:5]).replace(
            '[', '').replace(']', '')
        self.uiHasil.label_2.setText(
            "Cluster {} merupakan saham bluechips \n\nSaham rekomendasi Cluster 1 : {} \nSaham rekomendasi Cluster 2 : {}".format(n_cluster, x_rankResult1, x_rankResult2))
        self.windowHasil.show()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
